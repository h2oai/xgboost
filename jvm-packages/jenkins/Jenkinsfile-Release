@Library('test-shared-library@mr/ita/190-build-summary-emailer') _

import ai.h2o.ci.BuildResult
import ai.h2o.ci.buildsummary.DetailsSummary
import ai.h2o.ci.buildsummary.StagesSummary

DEFAULT_NODE_LABEL = 'docker && !mr-0xc8'

NEXUS_TARGET_LOCAL='local'
NEXUS_TARGET_PUBLIC='public'

CENTOS_6 = 'centos6'
UBUNTU_14 = 'ubuntu14'

PUBLISHABLE_BRANCH_NAME = 'h2o3'

ARCHIVED_FILES = '**/ci-build/*.jar, **/ci-build/*.log, **/jvm-packages/xgboost4j/*.jar, **/jvm-packages/xgboost4j/*.log'

REGISTRY = 'docker.h2o.ai'
CENTOS_DOCKER_IMAGE = "${REGISTRY}/opsh2oai/h2o-3-xgboost-build-${CENTOS_6}"
UBUNTU_DOCKER_IMAGE = "${REGISTRY}/opsh2oai/h2o-3-xgboost-build-${UBUNTU_14}"

XGB_MAJOR_VERSION = '0.7'
XGB_VERSION = "${XGB_MAJOR_VERSION}.${currentBuild.number}"
if (env.BRANCH_NAME != PUBLISHABLE_BRANCH_NAME) {
    XGB_VERSION = "0.8-SNAPSHOT"
    NEXUS_TARGET_LOCAL='snapshot'
}

CENTOS_JAVA_HOME = '/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-3.b14.el6_9.x86_64'

CONFIGURATIONS = [
    [stageName: 'Build MINIMAL with OS X', name: 'minimal', useCuda: false, useOmp: false, os: 'osx', node: 'osx', distribution: ''],
    [stageName: 'Build MINIMAL with CentOS 6', name: 'minimal', useCuda: false, useOmp: false, os: 'linux', distribution: CENTOS_6, dockerImage: CENTOS_DOCKER_IMAGE],

    [stageName: 'Build OMP with CentOS 6', name: 'omp', useCuda: false, useOmp: true, os: 'linux', distribution: CENTOS_6, dockerImage: CENTOS_DOCKER_IMAGE, ompVersion: 4],
    [stageName: 'Build GPU with CentOS 6', name: 'gpu', useCuda: true, useOmp: true, os: 'linux', distribution: CENTOS_6, dockerImage: CENTOS_DOCKER_IMAGE, ompVersion: 4],

    [stageName: 'Build OMP with Ubuntu 14', name: 'omp', useCuda: false, useOmp: true, os: 'linux', distribution: UBUNTU_14, dockerImage: UBUNTU_DOCKER_IMAGE, ompVersion: 3],
    [stageName: 'Build GPU with Ubuntu 14', name: 'gpu', useCuda: true, useOmp: true, os: 'linux', distribution: UBUNTU_14, dockerImage: UBUNTU_DOCKER_IMAGE, ompVersion: 3],
]

Map CHECK_IMAGES = [
    linux_minimal: [
        [name: 'Check MINIMAL with CentOS 6.5', file: "xgboost4j-native-linux_minimal-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-minimal:centos6.5", target: 'minimal', os: 'linux'],
        [name: 'Check MINIMAL with CentOS 6.8', file: "xgboost4j-native-linux_minimal-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-minimal:centos6.8", target: 'minimal', os: 'linux'],
        [name: 'Check MINIMAL with CentOS 7.3', file: "xgboost4j-native-linux_minimal-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-minimal:centos7.3", target: 'minimal', os: 'linux'],
        [name: 'Check MINIMAL with Ubuntu 14', file: "xgboost4j-native-linux_minimal-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-minimal:ubuntu14", target: 'minimal', os: 'linux'],
        [name: 'Check MINIMAL with Ubuntu 16', file: "xgboost4j-native-linux_minimal-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-minimal:ubuntu16", target: 'minimal', os: 'linux']
    ],
    osx_minimal: [
        [name: 'Check MINIMAL with OS X', file: "xgboost4j-native-osx_minimal-${XGB_VERSION}.jar", node: 'osx', target: 'minimal', os: 'osx'],
    ],
    linux_ompv3: [
        [name: 'Check OMP with Ubuntu 14', file: "xgboost4j-native-linux_ompv3-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-omp:ubuntu14", target: 'omp', os: 'linux'],
    ],
    linux_ompv4: [
        [name: 'Check OMP with CentOS 6.5', file: "xgboost4j-native-linux_ompv4-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-omp:centos6.5", target: 'omp', os: 'linux'],
        [name: 'Check OMP with CentOS 6.8', file: "xgboost4j-native-linux_ompv4-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-omp:centos6.8", target: 'omp', os: 'linux'],
        [name: 'Check OMP with CentOS 7.3', file: "xgboost4j-native-linux_ompv4-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-omp:centos7.3", target: 'omp', os: 'linux'],
        [name: 'Check OMP with Ubuntu 16', file: "xgboost4j-native-linux_ompv4-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-omp:ubuntu16", target: 'omp', os: 'linux']
    ],
    linux_gpuv3: [
        [name: 'Check GPU with Ubuntu 14', file: "xgboost4j-native-linux_gpuv3-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-gpu:ubuntu14", target: 'gpu', os: 'linux'],
    ],
    linux_gpuv4: [
//        FIXME handle permission denied on some nodes (mr-0xc2, mr-0xc10, ...)
//        [name: 'Check GPU with CentOS 6.9', file: "xgboost4j-native-linux_gpuv4-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-gpu:centos6.9", target: 'gpu', os: 'linux'],
//        [name: 'Check GPU with CentOS 7.4', file: "xgboost4j-native-linux_gpuv4-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-gpu:centos7.4", target: 'gpu', os: 'linux'],
//        [name: 'Check GPU with Ubuntu 16', file: "xgboost4j-native-linux_gpuv4-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-gpu:ubuntu16", target: 'gpu', os: 'linux']
    ]
]

// initialize build summary
buildSummary('https://github.com/h2oai/xgboost', true)

// use default StagesSummary implementation
buildSummary.get().addStagesSummary(this, new StagesSummary())

BuildResult result = BuildResult.FAILURE

try {
    node(DEFAULT_NODE_LABEL) {
        sh 'env'

        buildSummary.stageWithSummary('Checkout and Pull') {
            deleteDir()
            def scmEnv = checkout scm
            setJobProperties(scmEnv)

            // setup custom DetailsSummary
            DetailsSummary detailsSummary = new DetailsSummary()
            detailsSummary.setEntry(this, 'XGBoost Version', XGB_VERSION)
            detailsSummary.setEntry(this, 'Deploy to Local Nexus', params.publishToLocalNexus ? 'Yes' : 'No')
            detailsSummary.setEntry(this, 'Deploy to Public Nexus', params.publishToPublicNexus ? 'Yes' : 'No')
            buildSummary.get().addDetailsSummary(this, detailsSummary)

            sh 'git submodule update --init --recursive'
        }

        buildSummary.stageWithSummary('Patch and Stash') {
            pullDockerImage(CENTOS_DOCKER_IMAGE)
            docker.withRegistry("https://${REGISTRY}") {
                docker.image(CENTOS_DOCKER_IMAGE).inside("--init") {
                    sh """
                        ${getCentOSEnvCmds()}

                        cd ${WORKSPACE}
        
                        cd dmlc-core/
                        wget https://raw.githubusercontent.com/h2oai/xgboost/master/patches/01_dmlc_core_imports.patch
                        git apply 01_dmlc_core_imports.patch
                        cd ..
                    """
                }
            }
            stash 'xgboost-sources'
        }
    }

    node(DEFAULT_NODE_LABEL) {
        try {
            final String stageDir = 'build-library'
            buildSummary.stageWithSummary('Build Library', stageDir) {
                dir(stageDir) {
                    deleteDir()
                    unstash 'xgboost-sources'
                }
                String nexusIP = sh(script: 'dig +short nexus', returnStdout: true)
                docker.withRegistry("https://${REGISTRY}") {
                    docker.image(CENTOS_DOCKER_IMAGE).inside("--init --add-host=nexus:${nexusIP}") {
                        prepareMavenEnv()
                        sh """
                            ${getCentOSEnvCmds()}
                            cd ${WORKSPACE}/${stageDir}/jvm-packages/xgboost4j
                            
                            ${getMvnVersionChangeCmd()}
                        """
                        if (params.publishToLocalNexus) {
                            deployLib(stageDir, NEXUS_TARGET_LOCAL)
                        }
                        if (params.publishToPublicNexus) {
                            deployLib(stageDir, NEXUS_TARGET_PUBLIC)
                        }
                    }
                }
            }
        } finally {
            archiveArtifacts artifacts: ARCHIVED_FILES, allowEmptyArchive: true
        }
    }

    parallel(CONFIGURATIONS.collectEntries { config ->
        [
            config.stageName, {
                config.stageDir = getStageDirFromConfiguration(config)

                echo "${config}"

                def nodeLabel = config.node
                if (nodeLabel == null) {
                    nodeLabel = DEFAULT_NODE_LABEL
                }
                buildSummary.stageWithSummary(config.stageName, config.stageDir) {
                    node(nodeLabel) {
                        buildSummary.refreshStage(config.stageName)
                        timeout(time: 60, unit: 'MINUTES') {
                            try {
                                cleanWs()
                                dir(config.stageDir) {
                                    unstash 'xgboost-sources'
                                }
                                if (config.dockerImage) {
                                    pullDockerImage(config)
                                    docker.withRegistry("https://${REGISTRY}") {
                                        docker.image(config.dockerImage).inside("--init") {
                                            executeBuild(config)
                                        }
                                    }
                                } else {
                                    executeBuild(config)
                                }

                                CHECK_IMAGES["${config.os}_${getBackendFromConfiguration(config)}"].each {checkConfig ->
                                    checkConfig.stageDir = config.stageDir

                                    buildSummary.stageWithSummary(checkConfig.name, checkConfig.stageDir) {
                                        if (checkConfig.dockerImage) {
                                            pullDockerCheckImage(checkConfig)
                                            docker.withRegistry("https://${REGISTRY}") {
                                                docker.image(checkConfig.dockerImage).inside("--init") {
                                                    executeCheck(checkConfig)
                                                }
                                            }
                                        } else {
                                            executeCheck(checkConfig)
                                        }
                                    }
                                }

                                stash name: "xgboost-${config.os}-${getBackendFromConfiguration(config)}-artifacts", includes: '**/ci-build/*.jar, **/lib/*.so, **/lib/*.dylib'
                            } finally {
                                archiveArtifacts artifacts: ARCHIVED_FILES, allowEmptyArchive: true
                            }
                        }
                    }
                }
            }
        ]
    })

    if (params.publishToLocalNexus || params.publishToPublicNexus) {
        node(DEFAULT_NODE_LABEL) {
            cleanWs()

            String nexusIP = sh(script: 'dig +short nexus', returnStdout: true)
            buildSummary.stageWithSummary('Deploy') {
                pullDockerImage(CENTOS_DOCKER_IMAGE)
                docker.image(CENTOS_DOCKER_IMAGE).inside("--init --add-host=nexus:${nexusIP}") {
                    prepareMavenEnv()
                    CONFIGURATIONS.each { config ->
                        buildSummary.stageWithSummary("Deploy ${config.os}-${getBackendFromConfiguration(config)}") {
                            config.stageDir = getStageDirFromConfiguration(config)

                            dir(getStageDirFromConfiguration(config)) {
                                unstash 'xgboost-sources'
                            }
                            unstash name: "xgboost-${config.os}-${getBackendFromConfiguration(config)}-artifacts"

                            final String backend = getBackendFromConfiguration(config)
                            final String jarFile = "xgboost4j-native-${config.os}_${backend}-${XGB_VERSION}.jar"

                            sh """
                                export JAVA_HOME=${CENTOS_JAVA_HOME}

                                cd ${WORKSPACE}/${config.stageDir}/ci-build/xgboost4j-${config.os}-${backend}
                                
                                echo "Copy ${jarFile}"
                                rm -rf check
                                mkdir -p src/main/resources
                                cp ../${jarFile} src/main/resources
                                
                                echo "Prepare jar content for packaging"
                                cd src/main/resources
                                unzip ${jarFile}
                                find . -maxdepth 1 -not -name '.' -and -not -name 'lib' -exec rm -rf '{}' \\;
                                cd ../../..
                        
                                echo "Set correct backend and version constants in Java class"
                                sed -i 's/!SUBST_VERSION/${XGB_VERSION}/' src/main/java/ai/h2o/*.java
                                sed -i 's/!SUBST_BACKEND/${backend}/' src/main/java/ai/h2o/*.java
                                sed -i 's/!SUBST_OS/${config.os}/' src/main/java/ai/h2o/*.java
                        
                                echo "Set correct version in POM file"
                                ${getMvnVersionChangeCmd()}
                            """

                            if (params.publishToLocalNexus) {
                                deployToNexus(config, NEXUS_TARGET_LOCAL)
                            }
                            if (params.publishToPublicNexus) {
                                deployToNexus(config, NEXUS_TARGET_PUBLIC)
                            }
                        }
                    }
                }
            }
        }
    }

    result = BuildResult.SUCCESS
} finally {
    sendEmailNotif(result, buildSummary.get().toEmail(this), ['michalr@h2o.ai'])
}

/**
 * @return Shell script used to set required CentOS environment. Exports JAVA_HOME and enables python 2.7 and devtoolset-3
 */
private String getCentOSEnvCmds() {
    return """
        export JAVA_HOME=${CENTOS_JAVA_HOME}
        source /opt/rh/python27/enable
        source /opt/rh/devtoolset-3/enable
    """
}

/**
 * Copies the maven settings file and imports the secring.gpg
 */
private void prepareMavenEnv() {
    withCredentials([file(credentialsId: 'nexus-settings-xml', variable: 'MAVEN_SETTINGS_PATH'), file(credentialsId: 'release-secret-key-ring-file', variable: 'SECRING_PATH')]) {
        sh """
            mkdir -p ~/.m2
            cp ${MAVEN_SETTINGS_PATH} ~/.m2/settings.xml

            gpg --import ${SECRING_PATH}
        """
    }
}

/**
 * Deploys the Java library to specified nexus
 * @param targetNexus Nexus ID to deploy to
 */
private void deployLib(final String stageDir, final String targetNexus) {
    sh """
        ${getCentOSEnvCmds()}
        cd ${WORKSPACE}/${stageDir}/jvm-packages/xgboost4j
        
        mvn -Dmaven.test.skip=true -DskipTests -Dtarget.nexus=${targetNexus} -Dexclude.xgboost.lib=true clean deploy > build-log-lib-\$(date +%s).log
    """
}

/**
 * Sets job properties based on the env variables from SCM. For all branches enables the option to upload to local Nexus.
 * For h2o3 branch enables the option to upload to public Nexus.
 * @param scmEnv env variables from SCM
 */
private void setJobProperties(final scmEnv) {
    List parametersList = [
            booleanParam(name: 'publishToLocalNexus', defaultValue: false, description: 'If true, publish the local Nexus')
    ]
    if (scmEnv.GIT_BRANCH == PUBLISHABLE_BRANCH_NAME) {
        parametersList += booleanParam(name: 'publishToPublicNexus', defaultValue: false, description: 'If true, publish the public Nexus')
    }
    properties([
            parameters(parametersList),
            pipelineTriggers([])
    ])
}

/**
 * 
 * @return Returns snipped used to set the required version in POM files.
 */
private String getMvnVersionChangeCmd() {
    return "mvn -DnewVersion=${XGB_VERSION} versions:set"
}

/**
 * Builds the library (with particular backend) for provided configuration.
 * @param config configuration used for build
 */
private void executeBuild(final config) {

    sh '''
        id
        printenv
    '''

    sh """
        cd ${WORKSPACE}
        mkdir -p ${config.os}-${getBackendFromConfiguration(config)}
        cd ${config.stageDir}

        make clean_all

        mkdir -p build ci-build
        cd build

        ${getBuildScript(config.os, config.distribution, config.useCuda, config.useOmp)}

        cd ${WORKSPACE}/${config.stageDir}/jvm-packages/xgboost4j
        ${getMvnVersionChangeCmd()}

        ${getJvmPackagesBuildScript(config)}
    """
    final String destDir = "${WORKSPACE}/${config.stageDir}/ci-build"
    GString destFile = "${destDir}/xgboost4j-native-${config.os}_${config.name}"
    if (config.ompVersion != null) {
        destFile += "v${config.ompVersion}"
    }
    destFile += "-${XGB_VERSION}.jar"
    sh """
        cd ${WORKSPACE}/${config.stageDir}/jvm-packages/xgboost4j

        mv build-log-* ${WORKSPACE}/${config.stageDir}/ci-build/
        mv target/h2o/xgboost4j-native-${config.os}-${XGB_VERSION}.jar ${destFile}
    """
}

/**
 * Returns build script for given environment 
 * @param os OS to build for, cannot be null
 * @param distribution Distribution to build for, might be null
 * @param useCuda whether GPU support should be enabled
 * @param useOmp whether OpenMP support should be enabled
 * @return Build script for given environment
 */
private String getBuildScript(os, distribution, useCuda, useOmp) {
    switch (os) {
        case 'linux':
            if (distribution == CENTOS_6) {
                return getCentOS6BuildScript(useCuda, useOmp)
            }
            if (distribution == UBUNTU_14) {
                return getUbuntu14BuildScript(useCuda, useOmp)
            }
            error "targetOS ${params.targetOS} not supported"
        case 'osx':
            return getOSXBuildScript(useCuda, useOmp)
        default:
            error "OS ${os} not supported"
    }
}

/**
 * Returns build script for CentOS 6.
 * @param useCuda whether GPU support should be enabled
 * @param useOmp whether OpenMP support should be enabled
 * @return Build script for CentOS 6
 */
private GString getCentOS6BuildScript(final boolean useCuda, final boolean useOmp) {
    return """
        ${getCentOSEnvCmds()}
        
        if [ "\$(gcc --version | head -1)" != 'gcc (GCC) 4.9.2 20150212 (Red Hat 4.9.2-6)' ]; then 
            echo "UNEXPECTED GCC VERSION"
            gcc --version
            exit 1; 
        fi
        if [ "\$(cmake --version | head -1)" != 'cmake version 3.5.2' ]; then 
            echo "UNEXPECTED CMAKE VERSION"
            cmake --version
            exit 1; 
        fi

        cmake .. ${getCMakeOpts(useCuda, useOmp)}
        make
    """
}

/**
 * Returns build script for Ubuntu 14.
 * @param useCuda whether GPU support should be enabled
 * @param useOmp whether OpenMP support should be enabled
 * @return Build script for Ubuntu 14
 */
private GString getUbuntu14BuildScript(final boolean useCuda, final boolean useOmp) {
    return """
        export JAVA_HOME=/usr/lib/jvm/java-8-oracle
        if [ "\$(cmake --version | head -1)" != 'cmake version 3.5.2' ]; then 
            echo "UNEXPECTED CMAKE VERSION"
            cmake --version
            exit 1; 
        fi

        cmake .. ${getCMakeOpts(useCuda, useOmp)}
        make
    """
}

/**
 * Returns build script for Mac OS X.
 * @param useCuda whether GPU support should be enabled
 * @param useOmp whether OpenMP support should be enabled
 * @return Build script for Mac OS X
 */
private GString getOSXBuildScript(final boolean useCuda, final boolean useOmp) {
    return """
        export JAVA_HOME=\$(/usr/libexec/java_home)
        
        cmake .. ${getCMakeOpts(useCuda, useOmp)}
        make
    """
}

/**
 * Returns script used to build jar library for given environment.
 * @param config configuration of the environment being checked
 * @return Script used to build jar library for given environment
 */
private String getJvmPackagesBuildScript(final config) {
    switch (config.os) {
        case 'linux':
            if (config.distribution == CENTOS_6) {
                return getCentOS6JvmPackagesBuildScript(config)
            }
            if (config.distribution == UBUNTU_14) {
                return getUbuntu14JvmPackagesBuildScript(config)
            }
            error "distribution ${config.distribution} not supported"
        case 'osx':
            return getOSXJvmPackagesBuildScript(config)
        default:
            error "OS ${config.os} not supported"
    }
}

/**
 * Returns script used to build jar library for CentOS 6.
 * @param config configuration of the environment being checked
 * @return Script used to build jar library for CentOS 6
 */
private GString getCentOS6JvmPackagesBuildScript(final config) {
    return """
        ${getCentOSEnvCmds()}

        if [ "\$(python --version 2>&1 | head -1)" != 'Python 2.7.13' ]; then 
            echo "UNEXPECTED PYTHON VERSION"
            python --version
        fi
        XGB_VERSION=${XGB_VERSION} XGB_BACKEND=${getBackendFromConfiguration(config)} \
            ${getBuildJARsOpts(config.useCuda, config.useOmp)} ./build_jars.sh
    """
}

/**
 * Returns script used to build jar library for Ubuntu 14.
 * @param config configuration of the environment being checked
 * @return Script used to build jar library for Ubuntu 14
 */
private GString getUbuntu14JvmPackagesBuildScript(final config) {
    return """
        export JAVA_HOME=/usr/lib/jvm/java-8-oracle
        XGB_VERSION=${XGB_VERSION} XGB_BACKEND=${getBackendFromConfiguration(config)} \
            ${getBuildJARsOpts(config.useCuda, config.useOmp)} ./build_jars.sh
    """
}

/**
 * Returns script used to build jar library for Mac OS X.
 * @param config configuration of the environment being checked
 * @return Script used to build jar library for Mac OS X
 */
private GString getOSXJvmPackagesBuildScript(final config) {
    return """
        export JAVA_HOME=\$(/usr/libexec/java_home)
        XGB_VERSION=${XGB_VERSION} XGB_BACKEND=${getBackendFromConfiguration(config)} \
            ${getBuildJARsOpts(config.useCuda, config.useOmp)} ./build_jars.sh
    """
}

/**
 * Returns String with options for CMake
 * @param useCuda whether GPU support should be enabled
 * @param useOmp whether OpenMP support should be enabled
 * @return String with options for CMake
 */
private String getCMakeOpts(final boolean useCuda, final boolean useOmp) {
    String opts = '-DJVM_BINDINGS:BOOL=ON'
    if (useCuda) {
        opts += ' -DUSE_CUDA:BOOL=ON'
    }
    if (useOmp) {
        opts += ' -DUSE_OPENMP:BOOL=ON'
    } else {
        opts += ' -DUSE_OPENMP:BOOL=OFF'
    }
    return opts
}

/**
 * Returns String with options for build_jars.sh script
 * @param useCuda whether GPU support should be enabled
 * @param useOmp whether OpenMP support should be enabled
 * @return String with options for build_jars.sh script
 */
private String getBuildJARsOpts(final boolean useCuda, final boolean useOmp) {
    List<String> opts = []
    if (useCuda) {
        opts += 'USE_GPU=TRUE'
    }
    if (useOmp) {
        opts += 'USE_OMP=TRUE'
    }
    return opts.join(' ')
}

/**
 * Executes check that all dependencies are satisfied for given environment.
 * @param config configuration of the environment being checked
 */
private void executeCheck(final config) {
    sh '''
        id
        printenv
    '''

    sh """
        cd ${WORKSPACE}/${config.stageDir}/ci-build
        echo "Checking ${config.file} with ${config.dockerImage}"
        rm -rf check
        mkdir check
        cp ${config.file} check/${config.file}
        cd check
        unzip ${config.file}
        chmod +x lib/${config.os}_64/libxgboost4j_${config.target}.*
        
        ${getCheckScript(config)}        
    """
}

/**
 * Returns script used to check that all dependencies are satisfied for given environment.
 * @param config configuration of the environment being checked
 * @return Script used to check that all dependencies are satisfied for given environment
 */
private String getCheckScript(final config) {
    switch (config.os) {
        case 'linux':
            return getLinuxCheckScript(config)
        case 'osx':
            return getOSXCheckScript(config)
        default:
            error "OS ${os} not supported"
    }
}

/**
 * Returns script to check dependencies inside a linux environment.
 * @param config configuration of the environment being checked
 * @return script to check dependencies inside a linux environment
 */
private GString getLinuxCheckScript(final config) {
    final GString lddCmd = "ldd lib/linux_64/libxgboost4j_${config.target}.so"
    final String dockerImage = config.dockerImage.replaceAll("${REGISTRY}/opsh2oai/", '').replaceAll('/', '-').replaceAll(':', '_')
    final GString lddCheckFile = "ldd-check-${dockerImage}-linux-${config.target}.log"
    return """
        ${lddCmd} > ${lddCheckFile} 2>&1
        cp ${lddCheckFile} ../
        if [ "\$(cat ${lddCheckFile} | grep -v 'libjvm.so => not found' | grep 'not found')" ]; then
            echo "ldd check failed! Please check the following output:"
            ${lddCmd}
            exit 1
        fi
    """
}

/**
 * Returns script to check dependencies inside the Mac OS X environment.
 * @param config configuration of the environment being checked
 * @return script to check dependencies inside the Mac OS X environment
 */
private GString getOSXCheckScript(final config) {
    final GString otoolCmd = "otool -L lib/osx_64/libxgboost4j_${config.target}.dylib"
    final GString lddCheckFile = "ldd-check-osx-${config.target}.log"
    return """
        ${otoolCmd} > ${lddCheckFile} 2>&1
        cp ${lddCheckFile} ../
        if [ "\$(cat ${lddCheckFile} | grep 'not')" ]; then
            echo "otool check failed! Please check the following output:"
            ${otoolCmd}
            exit 1
        fi
    """
}

/**
 * Deploys package created from given configuration into specified Nexus.
 * @param config configuration used to build the package
 * @param targetNexus Nexus to deploy the package to
 */
private void deployToNexus(final config, final String targetNexus) {
    String backend = getBackendFromConfiguration(config)
    sh """
        ${getCentOSEnvCmds()}
        
        cd ${WORKSPACE}/${config.stageDir}/ci-build/xgboost4j-${config.os}-${backend}
        
        echo "Upload to ${targetNexus}"
        mvn -Dtarget.nexus=${targetNexus} clean deploy
    """
}

/**
 * Returns backend name created from the specified configuration
 * @param config
 * @return Backend name created from the specified configuration
 */
private String getBackendFromConfiguration(final config) {
    String backend = config.name
    if (config.ompVersion) {
        backend += "v${config.ompVersion}"
    }
    return backend
}

/**
 * Returns folder where stage handling specified configuration should be executed.
 * @param config configuration handled by the stage
 * @return Folder where stage handling specified configuration should be executed.
 */
private GString getStageDirFromConfiguration(final config) {
    return "${config.os}-${getBackendFromConfiguration(config)}"
}

/**
 * Pulls the required image
 * @param requiredImage image to pull
 */
private void pullDockerImage(final String requiredImage) {
    withCredentials([usernamePassword(credentialsId: REGISTRY, usernameVariable: 'REGISTRY_USERNAME', passwordVariable: 'REGISTRY_PASSWORD')]) {
        sh """
            docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD ${REGISTRY}
            docker pull ${requiredImage}
        """
    }
}

/**
 * Gets the name of the image from the provided configuration and pulls this image
 * @param config configuration to get the image name from
 */
private void pullDockerImage(final Map config) {
    String requiredImage = CENTOS_DOCKER_IMAGE
    if (config.distribution == UBUNTU_14) {
        requiredImage = UBUNTU_DOCKER_IMAGE
    }
    pullDockerImage(requiredImage)
}

/**
 * Gets the check image from the provided configuration and pulls this image
 * @param config configuration to get the image name from
 */
private void pullDockerCheckImage(final config) {
    pullDockerImage(config.dockerImage)
}