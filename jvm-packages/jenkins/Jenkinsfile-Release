@Library('test-shared-library@mr/ita/190-build-summary-emailer') _

import ai.h2o.ci.BuildResult
import ai.h2o.ci.buildsummary.DetailsSummary
import ai.h2o.ci.buildsummary.StagesSummary

NEXUS_TARGET_LOCAL='local'
NEXUS_TARGET_PUBLIC='public'

CENTOS_6 = 'centos6'
UBUNTU_14 = 'ubuntu14'

PUBLISHABLE_BRANCH_NAME = 'h2o3'

ARCHIVED_FILES = 'ci-build/*.jar, jvm-packages/build-log-*.log, jvm-packages/check/ldd_check_*.log'

REGISTRY = 'docker.h2o.ai'
CENTOS_DOCKER_IMAGE = "${REGISTRY}/opsh2oai/h2o-3-xgboost-build-${CENTOS_6}"
UBUNTU_DOCKER_IMAGE = "${REGISTRY}/opsh2oai/h2o-3-xgboost-build-${UBUNTU_14}"

XGB_MAJOR_VERSION = '0.7'
XGB_VERSION = "${XGB_MAJOR_VERSION}.${currentBuild.number}"
if (env.BRANCH_NAME != PUBLISHABLE_BRANCH_NAME) {
    XGB_VERSION = "${XGB_MAJOR_VERSION}.9999-SNAPSHOT"
    NEXUS_TARGET_LOCAL='snapshot'
}

CONFIGURATIONS = [
    [stageName: 'Build MINIMAL with OS X', name: 'minimal', useCuda: false, useOmp: false, os: 'osx', node: 'osx', distribution: ''],
    [stageName: 'Build MINIMAL with CentOS 6', name: 'minimal', useCuda: false, useOmp: false, os: 'linux', distribution: CENTOS_6, dockerImage: CENTOS_DOCKER_IMAGE],

    [stageName: 'Build OMP with CentOS 6', name: 'omp', useCuda: false, useOmp: true, os: 'linux', distribution: CENTOS_6, dockerImage: CENTOS_DOCKER_IMAGE, ompVersion: 4],
    [stageName: 'Build GPU with CentOS 6', name: 'gpu', useCuda: true, useOmp: true, os: 'linux', distribution: CENTOS_6, dockerImage: CENTOS_DOCKER_IMAGE, ompVersion: 4],

    [stageName: 'Build OMP with Ubuntu 14', name: 'omp', useCuda: false, useOmp: true, os: 'linux', distribution: UBUNTU_14, dockerImage: UBUNTU_DOCKER_IMAGE, ompVersion: 3],
    [stageName: 'Build GPU with Ubuntu 14', name: 'gpu', useCuda: true, useOmp: true, os: 'linux', distribution: UBUNTU_14, dockerImage: UBUNTU_DOCKER_IMAGE, ompVersion: 3],
]

Map CHECK_IMAGES = [
    minimal_linux: [
        [name: 'Check MINIMAL with CentOS 6.5', file: "xgboost4j-native-linux_minimal-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-minimal:centos6.5", target: 'minimal', os: 'linux'],
        [name: 'Check MINIMAL with CentOS 6.8', file: "xgboost4j-native-linux_minimal-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-minimal:centos6.8", target: 'minimal', os: 'linux'],
        [name: 'Check MINIMAL with CentOS 7.3', file: "xgboost4j-native-linux_minimal-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-minimal:centos7.3", target: 'minimal', os: 'linux'],
        [name: 'Check MINIMAL with Ubuntu 14', file: "xgboost4j-native-linux_minimal-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-minimal:ubuntu14", target: 'minimal', os: 'linux'],
        [name: 'Check MINIMAL with Ubuntu 16', file: "xgboost4j-native-linux_minimal-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-minimal:ubuntu16", target: 'minimal', os: 'linux']
    ],
    minimal_osx: [
        [name: 'Check MINIMAL with OS X', file: "xgboost4j-native-osx_minimal-${XGB_VERSION}.jar", node: 'osx', target: 'minimal', os: 'osx'],
    ],
    ompv3: [
        [name: 'Check OMP with Ubuntu 14', file: "xgboost4j-native-linux_ompv3-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-omp:ubuntu14", target: 'omp', os: 'linux'],
    ],
    ompv4: [
        [name: 'Check OMP with CentOS 6.5', file: "xgboost4j-native-linux_ompv4-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-omp:centos6.5", target: 'omp', os: 'linux'],
        [name: 'Check OMP with CentOS 6.8', file: "xgboost4j-native-linux_ompv4-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-omp:centos6.8", target: 'omp', os: 'linux'],
        [name: 'Check OMP with CentOS 7.3', file: "xgboost4j-native-linux_ompv4-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-omp:centos7.3", target: 'omp', os: 'linux'],
        [name: 'Check OMP with Ubuntu 16', file: "xgboost4j-native-linux_ompv4-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-omp:ubuntu16", target: 'omp', os: 'linux']
    ],
    gpuv3: [
        [name: 'Check GPU with Ubuntu 14', file: "xgboost4j-native-linux_gpuv3-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-gpu:ubuntu14", target: 'gpu', os: 'linux'],
    ],
    gpuv4: [
        [name: 'Check GPU with CentOS 6.9', file: "xgboost4j-native-linux_gpuv4-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-gpu:centos6.9", target: 'gpu', os: 'linux'],
        [name: 'Check GPU with CentOS 7.4', file: "xgboost4j-native-linux_gpuv4-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-gpu:centos7.4", target: 'gpu', os: 'linux'],
        [name: 'Check GPU with Ubuntu 16', file: "xgboost4j-native-linux_gpuv4-${XGB_VERSION}.jar", dockerImage: "${REGISTRY}/opsh2oai/h2o-3-xgb-runtime-gpu:ubuntu16", target: 'gpu', os: 'linux']
    ]
]

// initialize build summary
buildSummary('https://github.com/h2oai/xgboost', true)

// use default StagesSummary implementation
buildSummary.get().addStagesSummary(this, new StagesSummary())

BuildResult result = BuildResult.FAILURE

try {
    node('docker && !mr-0xc8 && !mr-0xc2') {
        sh 'env'

        buildSummary.stageWithSummary('Checkout and Pull') {
            deleteDir()
            def scmEnv = checkout scm
            setJobProperties(scmEnv)

            // setup custom DetailsSummary
            DetailsSummary detailsSummary = new DetailsSummary()
            detailsSummary.setEntry(this, 'Publish', params.publish ? 'Yes' : 'No')
            buildSummary.get().addDetailsSummary(this, detailsSummary)

            sh 'git submodule update --init --recursive'
            withCredentials([usernamePassword(credentialsId: REGISTRY, usernameVariable: 'REGISTRY_USERNAME', passwordVariable: 'REGISTRY_PASSWORD')]) {
                sh """
                    docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD ${REGISTRY}
                    docker pull ${CENTOS_DOCKER_IMAGE}
                    docker pull ${UBUNTU_DOCKER_IMAGE}
                """
            }
        }

        buildSummary.stageWithSummary('Patch and Stash') {
            sh """
                cd ${WORKSPACE}

                cd dmlc-core/
                wget https://raw.githubusercontent.com/h2oai/xgboost/master/patches/01_dmlc_core_imports.patch
                git apply 01_dmlc_core_imports.patch
                cd ..
            """
            stash 'xgboost-sources'
            stash name: "xgboost-jar-artifacts", includes: 'ci-build/*.jar', allowEmpty: true
        }

        CONFIGURATIONS.collect { config ->
            buildSummary.stageWithSummary(config.stageName) {
                try {
                    timeout(time: 60, unit: 'MINUTES') {
                        if (config.node) {
                            node(config.node) {
                                try {
                                    deleteDir()
                                    unstash "xgboost-jar-artifacts"
                                    unstash 'xgboost-sources'
                                    executeBuild(config)
                                    stash name: "xgboost-jar-artifacts", includes: 'ci-build/*.jar'
                                } finally {
                                    archiveArtifacts artifacts: ARCHIVED_FILES, allowEmptyArchive: true
                                }
                            }
                        } else if (config.dockerImage) {
                            docker.withRegistry("https://${REGISTRY}") {
                                docker.image(config.dockerImage).inside("--init") {
                                    executeBuild(config)
                                }
                            }
                        } else {
                            error "Configuration must specify either node or dockerImage"
                        }
                    }
                } finally {
                    archiveArtifacts artifacts: ARCHIVED_FILES, allowEmptyArchive: true
                }
            }
        }

        CHECK_IMAGES.each { target, checkConfigs ->
            checkConfigs.each { checkConfig ->
                buildSummary.stageWithSummary(checkConfig.name) {
                    if (checkConfig.node) {
                        node(checkConfig.node) {
                            unstash "xgboost-jar-artifacts"
                            executeCheck(checkConfig)
                        }
                    } else if (checkConfig.dockerImage) {
                        docker.withRegistry("https://${REGISTRY}") {
                            docker.image(checkConfig.dockerImage).inside("--init") {
                                executeCheck(checkConfig)
                            }
                        }
                    } else {
                        error "Configuration must specify either node or dockerImage"
                    }
                }
            }
        }

        if (params.publishToLocalNexus || params.publishToPublicNexus) {
            String nexusIP = sh(script: 'dig +short nexus', returnStdout: true)
            docker.image(CENTOS_DOCKER_IMAGE).inside("--init --add-host=nexus:${nexusIP}") {
                withCredentials([file(credentialsId: 'nexus-settings-xml', variable: 'MAVEN_SETTINGS_PATH'), file(credentialsId: 'release-secret-key-ring-file', variable: 'SECRING_PATH')]) {
                    sh """
                        cat ${MAVEN_SETTINGS_PATH}
                        mkdir -p ~/.m2
                        cp ${MAVEN_SETTINGS_PATH} ~/.m2/settings.xml

                        gpg --import ${SECRING_PATH}
                    """
                }
                unstash "xgboost-jar-artifacts"
                CONFIGURATIONS.each {configuration ->
                    buildSummary.stageWithSummary("Publish ${configuration.os}-${getBackendFromConfiguration(configuration)}") {
                        if (params.publishToLocalNexus) {
                            uploadToNexus(configuration, NEXUS_TARGET_LOCAL)
                        }
                        if (params.publishToPublicNexus) {
                            uploadToNexus(configuration, NEXUS_TARGET_PUBLIC)
                        }
                    }
                }
            }
        }
    }
    result = BuildResult.SUCCESS
} finally {
    sendEmailNotif(result, buildSummary.get().toEmail(this), ['michalr@h2o.ai'])
}

private void setJobProperties(final scmEnv) {
    List parametersList = [
            booleanParam(name: 'publishToLocalNexus', defaultValue: false, description: 'If true, publish the local Nexus')
    ]
    if (scmEnv.GIT_BRANCH == PUBLISHABLE_BRANCH_NAME) {
        parametersList += booleanParam(name: 'publishToPublicNexus', defaultValue: false, description: 'If true, publish the public Nexus')
    }
    properties([
            parameters(parametersList),
            pipelineTriggers([])
    ])
}

private void executeBuild(final config) {
    final String backend = getBackendFromConfiguration(config)

    sh '''
        id
        printenv
    '''

    sh """
        cd ${WORKSPACE}

        make clean_all

        mkdir -p build ci-build
        cd build

        ${getBuildScript(config.os, config.distribution, config.useCuda, config.useOmp)}

        cd ${WORKSPACE}/jvm-packages
        mvn -DnewVersion=${XGB_VERSION} \
            -Dxgboost.backend.type=${backend} \
            versions:set
        ${getJvmPackagesBuildScript(config)}
    """
    GString destFile = "${WORKSPACE}/ci-build/xgboost4j-native-${config.os}_${config.name}"
    if (config.ompVersion != null) {
        destFile += "v${config.ompVersion}"
    }
    destFile += "-${XGB_VERSION}.jar"
    sh """
        cd ${WORKSPACE}/jvm-packages

        cp target/h2o/xgboost4j-${backend}-${XGB_VERSION}.jar ${WORKSPACE}/ci-build/
        cp target/h2o/xgboost4j-native-${config.os}-${XGB_VERSION}.jar ${destFile}
    """
}

private String getBuildScript(os, distribution, useCuda, useOmp) {
    switch (os) {
        case 'linux':
            if (distribution == CENTOS_6) {
                return getCentOS6BuildScript(useCuda, useOmp)
            }
            if (distribution == UBUNTU_14) {
                return getUbuntu14BuildScript(useCuda, useOmp)
            }
            error "targetOS ${params.targetOS} not supported"
        case 'osx':
            return getOSXBuildScript(useCuda, useOmp)
        default:
            error "OS ${os} not supported"
    }
}

private GString getCentOS6BuildScript(final boolean useCuda, final boolean useOmp) {
    return """
        export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-3.b14.el6_9.x86_64
        source /opt/rh/devtoolset-3/enable
        if [ "\$(gcc --version | head -1)" != 'gcc (GCC) 4.9.2 20150212 (Red Hat 4.9.2-6)' ]; then 
            echo "UNEXPECTED GCC VERSION"
            gcc --version
            exit 1; 
        fi
        if [ "\$(cmake --version | head -1)" != 'cmake version 3.5.2' ]; then 
            echo "UNEXPECTED CMAKE VERSION"
            cmake --version
            exit 1; 
        fi

        cmake .. ${getCMakeOpts(useCuda, useOmp)}
        make
    """
}

private GString getUbuntu14BuildScript(final boolean useCuda, final boolean useOmp) {
    return """
        export JAVA_HOME=/usr/lib/jvm/java-8-oracle
        if [ "\$(cmake --version | head -1)" != 'cmake version 3.5.2' ]; then 
            echo "UNEXPECTED CMAKE VERSION"
            cmake --version
            exit 1; 
        fi

        cmake .. ${getCMakeOpts(useCuda, useOmp)}
        make
    """
}

private GString getOSXBuildScript(final boolean useCuda, final boolean useOmp) {
    return """
        export JAVA_HOME=\$(/usr/libexec/java_home)
        
        cmake .. ${getCMakeOpts(useCuda, useOmp)}
        make
    """
}

private String getJvmPackagesBuildScript(final config) {
    switch (config.os) {
        case 'linux':
            if (config.distribution == CENTOS_6) {
                return getCentOS6JvmPackagesBuildScript(config)
            }
            if (config.distribution == UBUNTU_14) {
                return getUbuntu14JvmPackagesBuildScript(config)
            }
            error "distribution ${config.distribution} not supported"
        case 'osx':
            return getOSXJvmPackagesBuildScript(config)
        default:
            error "OS ${config.os} not supported"
    }
}

private GString getCentOS6JvmPackagesBuildScript(final config) {
    return """
        export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-3.b14.el6_9.x86_64
        source /opt/rh/devtoolset-3/enable
        source /opt/rh/python27/enable
        if [ "\$(python --version 2>&1 | head -1)" != 'Python 2.7.13' ]; then 
            echo "UNEXPECTED PYTHON VERSION"
            python --version
        fi
        XGB_VERSION=${XGB_VERSION} XGB_BACKEND=${getBackendFromConfiguration(config)} \
            ${getBuildJARsOpts(config.useCuda, config.useOmp)} ./build_jars.sh
    """
}

private GString getUbuntu14JvmPackagesBuildScript(final config) {
    return """
        export JAVA_HOME=/usr/lib/jvm/java-8-oracle
        XGB_VERSION=${XGB_VERSION} XGB_BACKEND=${getBackendFromConfiguration(config)} \
            ${getBuildJARsOpts(config.useCuda, config.useOmp)} ./build_jars.sh
    """
}

private GString getOSXJvmPackagesBuildScript(final config) {
    return """
        export JAVA_HOME=\$(/usr/libexec/java_home)
        XGB_VERSION=${XGB_VERSION} XGB_BACKEND=${getBackendFromConfiguration(config)} \
            ${getBuildJARsOpts(config.useCuda, config.useOmp)} ./build_jars.sh
    """
}

private String getCMakeOpts(final boolean useCuda, final boolean useOmp) {
    String opts = '-DJVM_BINDINGS:BOOL=ON'
    if (useCuda) {
        opts += ' -DUSE_CUDA:BOOL=ON'
    }
    if (useOmp) {
        opts += ' -DUSE_OPENMP:BOOL=ON'
    } else {
        opts += ' -DUSE_OPENMP:BOOL=OFF'
    }
    return opts
}

private String getBuildJARsOpts(final boolean useCuda, final boolean useOmp) {
    List<String> opts = []
    if (useCuda) {
        opts += 'USE_GPU=TRUE'
    }
    if (useOmp) {
        opts += 'USE_OMP=TRUE'
    }
    return opts.join(' ')
}

private void executeCheck(final config) {
    sh '''
        id
        printenv
    '''

    sh """
        cd ${WORKSPACE}/ci-build
        echo "Checking ${config.file}"
        rm -rf check
        mkdir check
        cp ${config.file} check/${config.file}
        cd check
        unzip ${config.file}
        chmod +x lib/${config.os}_64/libxgboost4j_${config.target}.*
        
        ${getCheckScript(config)}
        
    """
}

private String getCheckScript(final config) {
    switch (config.os) {
        case 'linux':
            return getLinuxCheckScript(config.target)
        case 'osx':
            return getOSXCheckScript(config.target)
        default:
            error "OS ${os} not supported"
    }
}

private GString getLinuxCheckScript(final String target) {
    final GString lddCmd = "ldd lib/linux_64/libxgboost4j_${target}.so"
    return """
        ${lddCmd} &> ldd_check_${target}.log
        if [ "\$(cat ldd_check_${target}.log | grep -v 'libjvm.so => not found' | grep 'not found')" ]; then
            echo "ldd check failed! Please check the following output:"
            ${lddCmd}
            exit 1
        fi
    """
}

private GString getOSXCheckScript(final String target) {
    final GString otoolCmd = "otool -L lib/osx_64/libxgboost4j_${target}.dylib"
    return """
        ${otoolCmd} &> ldd_check_${target}.log
        if [ "\$(cat ldd_check_${target}.log | grep 'not')" ]; then
            echo "otool check failed! Please check the following output:"
            ${otoolCmd}
            exit 1
        fi
    """
}

private void uploadToNexus(final configuration, final String targetNexus) {
    String backend = getBackendFromConfiguration(configuration)
    sh """
        cd ${WORKSPACE}/jvm-packages
        export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-3.b14.el6_9.x86_64
        source /opt/rh/devtoolset-3/enable
        source /opt/rh/python27/enable  
        
        rm -rf xgboost4j/check
        rm -rf xgboost4j/ci-build
        mkdir -p xgboost4j/ci-build
        cp ../ci-build/xgboost4j-native-${configuration.os}_${backend}-${XGB_VERSION}.jar xgboost4j/ci-build/

        mvn -Dmaven.test.skip=true \
            -DskipTests -Dtarget.nexus=${targetNexus} \
            -Dxgboost.backend.type=${configuration.os}-${backend} \
            -Dxgboost.jar.type=fat \
            clean deploy -pl xgboost4j

        rm -rf ../xgboost4j/ci-build
    """
}

private String getBackendFromConfiguration(final configuration) {
    String backend = configuration.name
    if (configuration.ompVersion) {
        backend += "v${configuration.ompVersion}"
    }
    return backend
}